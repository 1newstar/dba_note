
0. 语句加锁分析

	其实啊，"XXX语句该加什么锁"本身就是个伪命题，一条语句需要加的锁受到很多条件制约，比方说：

		1. 事务的隔离级别

		2. 语句执行时使用的索引（比如聚簇索引、唯一二级索引、普通二级索引）

		3. 查询条件（比方说=、=<、>=、<、>、等等）

		4. 具体执行的语句类型


1. RC隔离级别：
	
	1.1 主键索引范围(等值)的尾点:
		
		主键索引的范围(等值)查询(lock in share mode、for update模式)加锁：
			需要访问到不满足条件的第一行记录为止，并且加锁，语句执行结束后，会把不满足条件的记录锁进行释放， 语句结束不会把不满足条件的二级索引记录锁释放掉。
			--尾点延伸
		
		update语句主键索引(等值)范围更新加锁：
			不需要访问到不满足条件的第一行记录为止。
			--没有尾点延伸
		
		delete语句主键索引等值范围删除加锁：
			需要访问到不满足条件的第一行记录为止，并且加锁，语句执行结束后，会把不满足条件的记录锁进行释放。
			--尾点延伸
		
	1.2 主键索引范围(等值)的起点:
		-- 起点没有锁延伸。
	
	1.3 普通索引范围(等值)的尾点:
	
		lock in share mode模式和for update模式，对不满足条件的二级索引记录加锁，不需要回到主键索引记录上加锁， 语句结束不会把不满足条件的二级索引记录锁释放掉。
			--尾点延伸
		update和delete语句，对不满足条件的二级索引记录加锁，需要回到主键索引记录上加锁, 语句结束会把不满足条件的锁释放掉(二级索引记录锁+对应的主键索引记录锁)。
			--尾点延伸
	
	1.4 普通索引范围(等值)的起点:	
		-- 起点没有锁延伸。
	

			
			
2. RR隔离级别：

	2.1 主键索引范围(等值)的尾点:

		lock in share mode、for update、update、delete模式下
		-- 都没有尾点延伸。
		-- 8.0.18 之前的版本，在RR隔离级别有尾点延伸的问题。	
		
	
	2.2 主键索引范围(等值)的起点:
		-- 起点没有锁延伸。
	
	2.3 普通索引范围(等值)的尾点:
	
		lock in share mode模式和for update模式， 对不满足条件的二级索引记录加锁 ， 不需要回到主键索引记录上加锁。
			-- 尾点延伸 
		update和delete语句，对不满足条件的二级索引记录加锁，需要回到主键索引记录上加锁，不会释放不满足条件的锁。
			-- 尾点延伸
			
	2.4 普通索引范围(等值)的起点:	
		-- 起点没有锁延伸。
	
	