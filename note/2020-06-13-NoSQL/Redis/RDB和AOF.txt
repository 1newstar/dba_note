

Redis 共有两种数据持久化类型: RDB和AOF

RDB: (类似MySQL基于某个时间点的全备)
	Redis在某一个时间点上的快照, 适用于 备份和灾难恢复
	通过持久化将其内存中的数据转储到一个默认名为 dump.rdb 的文件中
	save参数决定RDB的触发策略
		save 900 1      # 如果在900秒内有超过1个键发生了改变, 则会进行一次RDB快照
		save 300 10
		save 60 10000
	
	save 命令和bgsave命令 可以手动启动一次RDB快照:
		save 命令:
			使用 redis的主线程进行同步存储
			save 命令会阻塞Redis服务器, 所以永远不要在生产环境中使用.
			
		bgsave命令:
			Redis 的主线程将继续处理收到的命令, 同时会通过 fork() 系统调用创建一个子进程将转储数据保存到一个名为  tmp-<bgsave-pid>.rdb 的临时文件中 
			当转储过程结束后, 这个临时文件会被重命名为参数 dbfilename 定义的名字并覆盖由参数 dir 指定的本地目录的旧转储文件
		
	
AOF: (类似MySQL的binlog)
	全称 append-only-file
	是一种只记录Redis写入命令的追加式日志文件
	因为每个写入命令都会被追加到文件中, 所以AOF的数据一致性比RDB更高 
	是一个写入操作的日志, 将在服务器启动时被重放.
	
	工作机制/写入流程:
		操作系统实际上维护了一个缓冲区, Redis的命令首先会被写入到这个缓冲区中
		缓冲区的数据必须被刷新到磁盘中才能被永久保存
		
	通过Redis的配置参数 appendfsync 来调整调用 fsync() 频率(刷盘):
		appendfsync = always: 
			表示对每个写入命令都调用 fsync(), 确保在发生意外的服务器崩溃或硬件故障时, 只丢失一个命令
			缺点: fsync() 是一个阻塞调用, Redis的性能会受到物理磁盘写入性能的限制
			
		appendfsync = everysec:
			每秒调用一次 fsync()
			在意外灾难事件中只会丢失一秒钟内的数据
		
		appendfsync = no:
			永远不调用 fsync(), 由操作系统决定 什么时候将缓冲区的数据写入到磁盘.
			
		
		
使用 info persistence来获取当前正在进行的持久化过程的相关指标:
	192.168.0.112:6379> info persistence
	# Persistence
	loading:0
	rdb_changes_since_last_save:0
	rdb_bgsave_in_progress:0
	rdb_last_save_time:1573457282
	rdb_last_bgsave_status:ok
	rdb_last_bgsave_time_sec:0
	rdb_current_bgsave_time_sec:-1
	rdb_last_cow_size:6385664
	aof_enabled:1
	aof_rewrite_in_progress:0
	aof_rewrite_scheduled:0
	aof_last_rewrite_time_sec:0
	aof_current_rewrite_time_sec:-1
	aof_last_bgrewrite_status:ok
	aof_last_write_status:ok
	aof_last_cow_size:6393856
	aof_current_size:138
	aof_base_size:138
	aof_pending_rewrite:0
	aof_buffer_length:0
	aof_rewrite_buffer_length:0
	aof_pending_bio_fsync:0
	aof_delayed_fsync:0


相关参考:
	https://mp.weixin.qq.com/s/DwAwR1a5GcjdldpMykofDQ   redis的持久化方式RDB和AOF的区别 
	https://mp.weixin.qq.com/s/hYtPZJzq7nl9EH1ZqwcrXg   简明的图解Redis RDB持久化、AOF持久化
	
	
	
