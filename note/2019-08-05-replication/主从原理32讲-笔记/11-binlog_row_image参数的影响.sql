
1. 参数binlog_row_image的影响
2. 过滤方式
3. DML event 中的标识
	3.1 初始化表结构和数据
	3.2 binlog_row_image = FULL	 
	3.3 binlog_row_image = minimal		
		如果是 update 呢?
	3.4 小结							
4. 相关参考	
5. 未完成

	
	
1. 参数binlog_row_image的影响
	binlog_row_image 参数一共有3种取值，官方文档和源码中的含义如下
	binlog_row_image = full
		官方文档中的含义
			Log all columns
				binlog 日志会记录所有列
			Log all columns in both the before image and the after image.
				记录前映像和后映像中的所有列。	
				
		源码中的含义
			all columns in the read_set 
			all columns in the write_set

		对于前映像和后映像来讲都是记录全部的字段
		不仅某些闪回工具依赖这种设置，并且记录全部字段对于我们诊断问题，修复数据都有更多的帮助
		设置为 FULL 可以让从库在选择索引的时候有更多的选择，可能会提高从库应用 event 的效率。
		
	binlog_row_image = minimal 
		官方文档中的含义
			Log only changed columns, and columns needed to identify rows	
				仅记录更改的列以及标识行所需的列
			Log only those columns in the before image that are required to identify the row to be changed; 
				仅记录前映像中标识要更改的行所需的那些列；
				log only those columns in the after image where a value was specified by the SQL statement, or generated by auto-increment.
					仅记录后映像中由SQL语句指定值或由自动增量生成的值的那些列。
				
		源码中的含义
			this marks the PKE fields in the read_set
			this marks all fields where a value was speified in the write_set
			
		对于  before_image 来讲只要记录主键或者第一个非空的唯一键到 event，对于 after_image 来讲只会记录需要的变更的字段，包括自增值。   # 理解了.
		如果表中没有主键也没有非空的唯一键那么即使是设置 binlog_row_image 为 minimal，before_image 也会记录全部的字段值
		
		
	binlog_row_image = noblob 
		官方文档中的含义
			Log all columns, except for unneeded BLOB and TEXT columns
				记录所有列，但不需要的BLOB和TEXT列除外
			Log all columns (same as full), except for BLOB and TEXT columns that are not required to identify rows, or that have not changed.
				记录所有列（与完整列相同），除了不需要BLOB和TEXT列来标识行或未更改之外。
				
		源码中的含义
			this marks pke + all non-blob fields in the read_set
			this marks all fields where a value was specified and all non-blob fields in the write_set
	

	binlog_row_image 设置为非 full 的原因：
	
		However, it is not strictly necessary to include every column in both images, and we can often save disk, memory, and network usage by logging only those columns which are actually required.
	
		如果并不一定要在两个映像中都包括每一列，并且通过记录仅实际需要的那些列，可以节省磁盘、内存和网络流量。
		
	read_set 和 write_set 就是代表我们的 columns_before_image 位图和 columns_after_image 位图
	insert 语句：记录变更的 after_image（插入的数据），内部使用 write_set 过滤
	delete 语句：记录变更的 before_image（删除的数据），内部使用 read_set 过滤
	update 语句：记录变更的 before_image 和 after_image（修改的数据），内部使用 read_set 和 write_set 过滤。
	
	Delete 操作为例，实际上对于索引的选择 Update 操作也是一样的，因为都是通过before_image去查找数据
	
	
2. 过滤方式
	read_set 和 write_set 我们可以理解为一种和字段相应的位图；
	它是一种规则，一个作用就是规定哪些字段需要写入到 event 中
	在每次写入 event 之前，实际上数据都是全字段的行数据，但是随后会通过我们 read_set 和 write_set 的设置进行过滤生成写入 event 的行数据
	如果是参数设置为 FULL , 那么则记录全字段。
	
	
3. DML event 中的标识
	3.1 初始化表结构和数据
		CREATE TABLE `t1` (
		  `a` int(11) NOT NULL,
		  `b` int(11) NOT NULL,
		  `name` varchar(20) DEFAULT NULL,
		  UNIQUE KEY `b` (`b`)
		) ENGINE=InnoDB  CHARSET=utf8mb4;

		insert into t1 values(1, 10, 'gaopeng');
		insert into t1 values(2, 20, 'gaopeng');
	
	3.2 binlog_row_image = FULL	
		执行如下语句 
			show variables like '%image%';
			root@mysqldb 18:32:  [db1]> show variables like '%image%';
			+------------------+-------+
			| Variable_name    | Value |
			+------------------+-------+
			| binlog_row_image | FULL  |
			+------------------+-------+
			1 row in set (0.00 sec)

		
			flush logs;
			delete from t1 where a=1;
			
		使用 mysqlbinlog 解析 
			[root@mgr9 logs]# mysqlbinlog mysql-bin.000064 -vv --base64-output='decode-rows'
			/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
			/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
			DELIMITER /*!*/;
			# at 4
			#200218 18:32:47 server id 330601  end_log_pos 123 CRC32 0x56e11a46 	Start: binlog v 4, server v 5.7.22-log created 200218 18:32:47
			# at 123
			#200218 18:32:47 server id 330601  end_log_pos 154 CRC32 0x3ad36765 	Previous-GTIDs
			# [empty]
			# at 154
			#200218 18:33:23 server id 330601  end_log_pos 219 CRC32 0xec2de972 	Anonymous_GTID	last_committed=0	sequence_number=1	rbr_only=yes
			/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;
			SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;
			# at 219
			#200218 18:33:23 server id 330601  end_log_pos 290 CRC32 0x3fd4cc18 	Query	thread_id=24	exec_time=0	error_code=0
			SET TIMESTAMP=1582022003/*!*/;
			SET @@session.pseudo_thread_id=24/*!*/;
			SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
			SET @@session.sql_mode=1075838976/*!*/;
			SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
			/*!\C utf8 *//*!*/;
			SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=45/*!*/;
			SET @@session.lc_time_names=0/*!*/;
			SET @@session.collation_database=DEFAULT/*!*/;
			BEGIN
			/*!*/;
			# at 290
			#200218 18:33:23 server id 330601  end_log_pos 338 CRC32 0x7b3d0b62 	Table_map: `db1`.`t1` mapped to number 143
			# at 338
			#200218 18:33:23 server id 330601  end_log_pos 390 CRC32 0xe47aeab7 	Delete_rows: table id 143 flags: STMT_END_F
			### DELETE FROM `db1`.`t1`
			### WHERE
			###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
			###   @2=10 /* INT meta=0 nullable=0 is_null=0 */
			###   @3='gaopeng' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */
			# at 390
			#200218 18:33:23 server id 330601  end_log_pos 421 CRC32 0x7fa5ae54 	Xid = 245
			COMMIT/*!*/;
			# at 421
			#200218 18:33:26 server id 330601  end_log_pos 468 CRC32 0x6e3243d5 	Rotate to mysql-bin.000065  pos: 4
			SET @@SESSION.GTID_NEXT= 'AUTOMATIC' /* added by mysqlbinlog */ /*!*/;
			DELIMITER ;
			# End of log file
			/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/;
			/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/;
			
		使用 mysqlbinlog --hexdump 解析， DELETE_EVENT 如下
		
			[root@mgr9 logs]# mysqlbinlog mysql-bin.000064 -vv --hexdump --base64-output='decode-rows'
			/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
			/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
			DELIMITER /*!*/;
			# at 4
			#200218 18:32:47 server id 330601  end_log_pos 123 CRC32 0x56e11a46 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#        4 4f bd 4b 5e   0f   69 0b 05 00   77 00 00 00   7b 00 00 00   00 00
			#       17 04 00 35 2e 37 2e 32 32  2d 6c 6f 67 00 00 00 00 |..5.7.22.log....|
			#       27 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |................|
			#       37 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |................|
			#       47 00 00 00 00 00 00 00 00  13 38 0d 00 08 00 12 00 |.........8......|
			#       57 04 04 04 04 12 00 00 5f  00 04 1a 08 00 00 00 08 |................|
			#       67 08 08 02 00 00 00 0a 0a  0a 2a 2a 00 12 34 00 01 |.............4..|
			#       77 46 1a e1 56                                      |F..V|
			# 	Start: binlog v 4, server v 5.7.22-log created 200218 18:32:47
			# at 123
			#200218 18:32:47 server id 330601  end_log_pos 154 CRC32 0x3ad36765 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#       7b 4f bd 4b 5e   23   69 0b 05 00   1f 00 00 00   9a 00 00 00   80 00
			#       8e 00 00 00 00 00 00 00 00  65 67 d3 3a             |........eg..|
			# 	Previous-GTIDs
			# [empty]
			# at 154
			#200218 18:33:23 server id 330601  end_log_pos 219 CRC32 0xec2de972 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#       9a 73 bd 4b 5e   22   69 0b 05 00   41 00 00 00   db 00 00 00   00 00
			#       ad 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |................|
			#       bd 00 00 00 00 00 00 00 00  00 02 00 00 00 00 00 00 |................|
			#       cd 00 00 01 00 00 00 00 00  00 00 72 e9 2d ec       |..........r...|
			# 	Anonymous_GTID	last_committed=0	sequence_number=1	rbr_only=yes
			/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;
			SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;
			# at 219
			#200218 18:33:23 server id 330601  end_log_pos 290 CRC32 0x3fd4cc18 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#       db 73 bd 4b 5e   02   69 0b 05 00   47 00 00 00   22 01 00 00   08 00
			#       ee 18 00 00 00 00 00 00 00  03 00 00 1a 00 00 00 00 |................|
			#       fe 00 00 01 00 00 20 40 00  00 00 00 06 03 73 74 64 |.............std|
			#      10e 04 21 00 21 00 2d 00 64  62 31 00 42 45 47 49 4e |.......db1.BEGIN|
			#      11e 18 cc d4 3f                                      |....|
			# 	Query	thread_id=24	exec_time=0	error_code=0
			SET TIMESTAMP=1582022003/*!*/;
			SET @@session.pseudo_thread_id=24/*!*/;
			SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
			SET @@session.sql_mode=1075838976/*!*/;
			SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
			/*!\C utf8 *//*!*/;
			SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=45/*!*/;
			SET @@session.lc_time_names=0/*!*/;
			SET @@session.collation_database=DEFAULT/*!*/;
			BEGIN
			/*!*/;
			# at 290
			#200218 18:33:23 server id 330601  end_log_pos 338 CRC32 0x7b3d0b62 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#      122 73 bd 4b 5e   13   69 0b 05 00   30 00 00 00   52 01 00 00   00 00
			#      135 8f 00 00 00 00 00 01 00  03 64 62 31 00 02 74 31 |.........db1..t1|
			#      145 00 03 03 03 0f 02 50 00  04 62 0b 3d 7b          |......P..b...|
			# 	Table_map: `db1`.`t1` mapped to number 143
			# at 338
			#200218 18:33:23 server id 330601  end_log_pos 390 CRC32 0xe47aeab7 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#      152 73 bd 4b 5e   20   69 0b 05 00   34 00 00 00   86 01 00 00   00 00
			#      165 8f 00 00 00 00 00 01 00  02 00 03 ff f8 01 00 00 |................|
			#      175 00 0a 00 00 00 07 67 61  6f 70 65 6e 67 b7 ea 7a |......gaopeng..z|
			#      185 e4                                               |.|
			# 	Delete_rows: table id 143 flags: STMT_END_F
			### DELETE FROM `db1`.`t1`
			### WHERE
			###   @1=1 /* INT meta=0 nullable=0 is_null=0 */
			###   @2=10 /* INT meta=0 nullable=0 is_null=0 */
			###   @3='gaopeng' /* VARSTRING(80) meta=80 nullable=1 is_null=0 */
			# at 390
			#200218 18:33:23 server id 330601  end_log_pos 421 CRC32 0x7fa5ae54 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#      186 73 bd 4b 5e   10   69 0b 05 00   1f 00 00 00   a5 01 00 00   00 00
			#      199 f5 00 00 00 00 00 00 00  54 ae a5 7f             |........T...|
			# 	Xid = 245
			COMMIT/*!*/;
			# at 421

			关键部分解析：
				ff：                         binlog_row_image 为 FULL 就是记录 16 进制 ff
				f8:                          16 进制 f8 转换为二进制为  11111000
				01 00 00 00：                实际数据第一个字段为 数据 1 
				0a 00 00 00：                实际数据第二个字段为 数据 10
				07 67 61  6f 70 65 6e 67：   实际数据字符串 gaopeng 的 ASCII 码。
			
			为什么 delete from t1 where a=1; 会在 binlog 中 用一个显示事务声明？
				因为一条SQL语句删除的数据可能包含多行记录，要保证删除这些记录的操作同时成功或者失败。
			
			
	3.3 binlog_row_image = minimal
	
		flush logs;
		set binlog_row_image='minimal';
		
		执行如下语句
			delete from t1 where a=2;
		
		使用 mysqlbinlog 解析 	
		
			[root@mgr9 logs]# mysqlbinlog mysql-bin.000066 -vv --base64-output='decode-rows'
			/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
			/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
			DELIMITER /*!*/;
			# at 4
			#200218 18:37:40 server id 330601  end_log_pos 123 CRC32 0x8164390d 	Start: binlog v 4, server v 5.7.22-log created 200218 18:37:40
			# Warning: this binlog is either in use or was not closed properly.
			# at 123
			#200218 18:37:40 server id 330601  end_log_pos 154 CRC32 0x5b0f8c2b 	Previous-GTIDs
			# [empty]
			# at 154
			#200218 18:37:41 server id 330601  end_log_pos 219 CRC32 0xbff6d461 	Anonymous_GTID	last_committed=0	sequence_number=1	rbr_only=yes
			/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;
			SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;
			# at 219
			#200218 18:37:41 server id 330601  end_log_pos 290 CRC32 0x7c886e6b 	Query	thread_id=24	exec_time=0	error_code=0
			SET TIMESTAMP=1582022261/*!*/;
			SET @@session.pseudo_thread_id=24/*!*/;
			SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
			SET @@session.sql_mode=1075838976/*!*/;
			SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
			/*!\C utf8 *//*!*/;
			SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=45/*!*/;
			SET @@session.lc_time_names=0/*!*/;
			SET @@session.collation_database=DEFAULT/*!*/;
			BEGIN
			/*!*/;
			# at 290
			#200218 18:37:41 server id 330601  end_log_pos 338 CRC32 0x4ef98123 	Table_map: `db1`.`t1` mapped to number 143
			# at 338
			#200218 18:37:41 server id 330601  end_log_pos 378 CRC32 0x58b4768a 	Delete_rows: table id 143 flags: STMT_END_F
			### DELETE FROM `db1`.`t1`
			### WHERE
			###   @2=20 /* INT meta=0 nullable=0 is_null=0 */
			# at 378
			#200218 18:37:41 server id 330601  end_log_pos 409 CRC32 0xe727debd 	Xid = 249
			COMMIT/*!*/;

		
		
		使用 mysqlbinlog --hexdump 解析， DELETE_EVENT 如下	
		
			[root@mgr9 logs]# mysqlbinlog mysql-bin.000066 -vv --hexdump --base64-output='decode-rows'
			/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/;
			/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/;
			DELIMITER /*!*/;
			# at 4
			#200218 18:37:40 server id 330601  end_log_pos 123 CRC32 0x8164390d 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#        4 74 be 4b 5e   0f   69 0b 05 00   77 00 00 00   7b 00 00 00   01 00
			#       17 04 00 35 2e 37 2e 32 32  2d 6c 6f 67 00 00 00 00 |..5.7.22.log....|
			#       27 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |................|
			#       37 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |................|
			#       47 00 00 00 00 00 00 00 00  13 38 0d 00 08 00 12 00 |.........8......|
			#       57 04 04 04 04 12 00 00 5f  00 04 1a 08 00 00 00 08 |................|
			#       67 08 08 02 00 00 00 0a 0a  0a 2a 2a 00 12 34 00 01 |.............4..|
			#       77 0d 39 64 81                                      |.9d.|
			# 	Start: binlog v 4, server v 5.7.22-log created 200218 18:37:40
			# Warning: this binlog is either in use or was not closed properly.
			# at 123
			#200218 18:37:40 server id 330601  end_log_pos 154 CRC32 0x5b0f8c2b 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#       7b 74 be 4b 5e   23   69 0b 05 00   1f 00 00 00   9a 00 00 00   80 00
			#       8e 00 00 00 00 00 00 00 00  2b 8c 0f 5b             |............|
			# 	Previous-GTIDs
			# [empty]
			# at 154
			#200218 18:37:41 server id 330601  end_log_pos 219 CRC32 0xbff6d461 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#       9a 75 be 4b 5e   22   69 0b 05 00   41 00 00 00   db 00 00 00   00 00
			#       ad 00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00 |................|
			#       bd 00 00 00 00 00 00 00 00  00 02 00 00 00 00 00 00 |................|
			#       cd 00 00 01 00 00 00 00 00  00 00 61 d4 f6 bf       |..........a...|
			# 	Anonymous_GTID	last_committed=0	sequence_number=1	rbr_only=yes
			/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*//*!*/;
			SET @@SESSION.GTID_NEXT= 'ANONYMOUS'/*!*/;
			# at 219
			#200218 18:37:41 server id 330601  end_log_pos 290 CRC32 0x7c886e6b 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#       db 75 be 4b 5e   02   69 0b 05 00   47 00 00 00   22 01 00 00   08 00
			#       ee 18 00 00 00 00 00 00 00  03 00 00 1a 00 00 00 00 |................|
			#       fe 00 00 01 00 00 20 40 00  00 00 00 06 03 73 74 64 |.............std|
			#      10e 04 21 00 21 00 2d 00 64  62 31 00 42 45 47 49 4e |.......db1.BEGIN|
			#      11e 6b 6e 88 7c                                      |kn..|
			# 	Query	thread_id=24	exec_time=0	error_code=0
			SET TIMESTAMP=1582022261/*!*/;
			SET @@session.pseudo_thread_id=24/*!*/;
			SET @@session.foreign_key_checks=1, @@session.sql_auto_is_null=0, @@session.unique_checks=1, @@session.autocommit=1/*!*/;
			SET @@session.sql_mode=1075838976/*!*/;
			SET @@session.auto_increment_increment=1, @@session.auto_increment_offset=1/*!*/;
			/*!\C utf8 *//*!*/;
			SET @@session.character_set_client=33,@@session.collation_connection=33,@@session.collation_server=45/*!*/;
			SET @@session.lc_time_names=0/*!*/;
			SET @@session.collation_database=DEFAULT/*!*/;
			BEGIN
			/*!*/;
			# at 290
			#200218 18:37:41 server id 330601  end_log_pos 338 CRC32 0x4ef98123 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#      122 75 be 4b 5e   13   69 0b 05 00   30 00 00 00   52 01 00 00   00 00
			#      135 8f 00 00 00 00 00 01 00  03 64 62 31 00 02 74 31 |.........db1..t1|
			#      145 00 03 03 03 0f 02 50 00  04 23 81 f9 4e          |......P.....N|
			# 	Table_map: `db1`.`t1` mapped to number 143
			# at 338
			#200218 18:37:41 server id 330601  end_log_pos 378 CRC32 0x58b4768a 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#      152 75 be 4b 5e   20   69 0b 05 00   28 00 00 00   7a 01 00 00   00 00
			#      165 8f 00 00 00 00 00 01 00  02 00 03 02 fe 14 00 00 |................|
			#      175 00 8a 76 b4 58                                   |..v.X|
			# 	Delete_rows: table id 143 flags: STMT_END_F
			### DELETE FROM `db1`.`t1`
			### WHERE
			###   @2=20 /* INT meta=0 nullable=0 is_null=0 */
			# at 378
			#200218 18:37:41 server id 330601  end_log_pos 409 CRC32 0xe727debd 
			# Position  Timestamp   Type   Master ID        Size      Master Pos    Flags 
			#      17a 75 be 4b 5e   10   69 0b 05 00   1f 00 00 00   99 01 00 00   00 00
			#      18d f9 00 00 00 00 00 00 00  bd de 27 e7             |............|
			# 	Xid = 249
			COMMIT/*!*/;
			

			关键部分解析：
				02:  16 进制 02 转换为二进制为 00000010 ，这里就是位图的表示方式； 说明第二个字段是需要记录到 event 中的
				fe： 16 进制 fe 转换为二进制为 11111110 ，
				14 00 00 00：实际的数据 16 进制 14， 转换为十进制为 20
				
		
	3.4 小结
		1. 验证了 before_image 值记录非空唯一键的值：
			对于 binlog_row_image=FULL 中的 before_image, 这里记录的是 b = 10。
			对于 binlog_row_image=minimal 中的 before_image 来讲只要记录主键或者第一个非空的唯一键到 event，这里记录是 非空的唯一键 b = 20。
		
		2. 如果参数 binlog_row_image=minimal，从库本表的结构和主库不同，没有主键和非空唯一键，只有一个 a 列上的索引，那么这个索引是用不到的，
			将会引起全表扫描，因为 a 列的值根本不会在 event 中记录；
			但是如果参数 binlog_row_image=FULL， a 列上的索引是可以使用，因为 event 中记录了全部字段的值。
			
			# 这里还不明白。
			
		3. binlog_row_image 参数控制着是否把 行记录的所有字段值的前映像和后映像写入到 binlog 中。
		
4. 相关参考	
	
	https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html#sysvar_binlog_row_image  
	MySQL 主从原理第11讲
	https://blog.51cto.com/hcymysql/2143391  参数binlog_row_image设置MINIMAL，你今天被坑了吗？
	https://www.cnblogs.com/gomysql/p/6155160.html  MySQL 5.7贴心参数之binlog_row_image
	http://www.yangchengec.cn/setup/84.html   安全考虑,binlog_row_image建议尽量使用FULL
	https://www.jianshu.com/p/b9262b87b08f   十一：参数binlog_row_image（笔记）
	
	http://blog.itpub.net/20892230/viewspace-2129567/  binlog很有用的2个参数binlog_rows_query_log_events和binlog_row_image
	
	
	
5. 未完成
	1.  binlog_row_image 3 个值的实验实验
		对比了 binlog_row_image = full 和 binlog_row_image = MINIMAL 下的 DML.
		
	2.  对比一下  insert 语句 下的 binlog_row_image = full 和 binlog_row_image = MINIMAL 在 binlog 日志文件中的格式
		对比了 binlog_row_image = full 和 binlog_row_image = MINIMAL 下的 DML.
	
	3. 参考笔记 《2020-03-07-binlog-FULL.sql》 《2020-03-09-binlog-MINIMAL.sql》

	
	