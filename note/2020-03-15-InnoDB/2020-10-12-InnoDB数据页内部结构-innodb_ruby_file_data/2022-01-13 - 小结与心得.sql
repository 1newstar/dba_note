

学习完成 小册 中的 行记录格式、数据页格式、B+树 这些模块的知识点后，再回头看看 《2020-10-12-InnoDB数据页内部结构-innodb_ruby_file_data》，会有不一样的理解。


保证不了数据页编号是连序存储的

	drop table if exists page_info2;
	CREATE TABLE `page_info2` (
	  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
	  `num` int(11) NOT NULL,
	  `name` varchar(20) NOT NULL,
	  `age` int(11) NOT NULL,
	  PRIMARY KEY (`id`),
	  KEY `idx_name` (`name`),
	  KEY `idx_age` (`age`)
	) ENGINE=InnoDB  DEFAULT CHARSET=utf8mb4;
	
	主键索引根节点的数据页编号 page no = 3;
	二级索引idx_name根节点的数据页编号 page no = 4;
	二级索引idx_age根节点的数据页编号 page no = 5;
	
	
	需要保证索引的记录是有序排序的，但是每个索引的数据页编号并不是连序存储的，因此需要双向链表把数据页关联起来。
	
	
主键索引和辅助索引的分析汇总

	100W行数据, 主键索引树高3层, 普通索引树高2层.

	主键索引: 
		
		叶子节点存储的所有行记录的计算公式:
		叶子节点使用了 1743个page;
		一个叶子节点页有 574条记录;
		叶子节点最后一个数据页有 92行记录;
		
		mysql> select 1742 * 574 + 92;
		+-----------------+
		| 1742 * 574 + 92 |
		+-----------------+
		|         1000000 |
		+-----------------+
		1 row in set (0.00 sec)
		
		主键索引的叶子节点存储的是整行记录，包含了 事务ID(6个字节) 和 回滚指针(7个字节)。

		
	辅助索引:	

		辅助索引的叶子节点使用了 832 个page;
		一个叶子节点页有 1203 条记录;
		辅助索引的叶子节点最后一个数据页有 307行记录;
		
		mysql> select 831 * 1203 + 307;
		+------------------+
		| 831 * 1203 + 307 |
		+------------------+
		|          1000000 |
		+------------------+
		1 row in set (0.00 sec)
			
	主键索引和辅助索引虽然在记录上是一致的, 但是索引树的高度却不一定是一致的，因为主键索引的叶子节点存储的是整行记录，同时每行记录包含了隐藏字段： 事务ID 和 回滚指针。

		
		
		