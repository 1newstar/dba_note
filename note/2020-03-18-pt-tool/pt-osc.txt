

说出pt-online-scheme-change锁表时间短的原因

pt-osc用原来的表结构创建一个新表， 创建 triggers（触发器），
然后按照需求修改表结构，再将原先的表数据拷贝至新表中，
再删除原来的表，将新表表名重命名为旧表表名。在拷贝的过程中，修改的数据被记录在触发器中，然后应用到新表上。



用原来的表结构创建一个新表，根据需求修改表结构，
然后将原始表中的数据复制到新表中。
复制完成后，再删除原来的表，将新表表名重命名为旧表表名。



pt-osc的缺点：
1、更容易导致主从数据延迟
2、如果运行过程中报错了，无法从上一个位置继续进行，需要从头开始
3、pt  创建trigger 或者删除trigger 的时候 有坑
4、不支持5.7的虚拟列功能

思考：
1. DDL语句在哪一个步骤执行？



pt-online-schema-change --execute --alter "add index(pad)" --user=pt_tool --password=123456abc --host=192.168.1.26 D=zst,t=sbtest1

pt-online-schema-change --execute --alter "add index(pad)" --user=root --password=123456abc D=zst,t=sbtest1

pt-online-schema-change --execute --alter "MODIFY COLUMN id bigint(11)" --user=root --password=123456abc D=zst,t=cron_test

[root@env bin]# pt-online-schema-change --execute --alter "add index(pad)" --user=pt_tool --password=123456abc --host=192.168.1.26 D=zst,t=sbtest1
Found 1 slaves:
  env
Will check slave lag on:
  env
Operation, tries, wait:
  analyze_table, 10, 1
  copy_rows, 10, 0.25
  create_triggers, 10, 1
  drop_triggers, 10, 1
  swap_tables, 10, 1
  update_foreign_keys, 10, 1
Altering `zst`.`sbtest1`...
Creating new table...
Created new table zst._sbtest1_new OK.
Altering new table...
Altered `zst`.`_sbtest1_new` OK.
2018-04-06T18:37:31 Creating triggers...
2018-04-06T18:37:31 Created triggers OK.
2018-04-06T18:37:31 Copying approximately 128448 rows...
Copying `zst`.`sbtest1`:  33% 01:06 remain
Copying `zst`.`sbtest1`:  91% 00:06 remain
Copying `zst`.`sbtest1`:  96% 00:03 remain
Copying `zst`.`sbtest1`:  99% 00:00 remain
2018-04-06T18:39:50 Copied rows OK.
2018-04-06T18:39:50 Analyzing new table...
2018-04-06T18:39:50 Swapping tables...
2018-04-06T18:39:52 Swapped original and new tables OK.
2018-04-06T18:39:52 Dropping old table...
2018-04-06T18:39:52 Dropped old table `zst`.`_sbtest1_old` OK.
2018-04-06T18:39:52 Dropping triggers...
2018-04-06T18:39:52 Dropped triggers OK.
Successfully altered `zst`.`sbtest1`.





[root@env bin]# pt-online-schema-change --execute --alter "add index(pad)" --user=pt_tool --password=123456abc --host=192.168.1.26 D=zst,t=sbtest1
Found 1 slaves:
  env
Will check slave lag on:
  env
Operation, tries, wait:
  analyze_table, 10, 1
  copy_rows, 10, 0.25
  create_triggers, 10, 1
  drop_triggers, 10, 1
  swap_tables, 10, 1
  update_foreign_keys, 10, 1
Altering `zst`.`sbtest1`...
Creating new table...
Created new table zst._sbtest1_new OK.
Altering new table...
Altered `zst`.`_sbtest1_new` OK.
2018-04-06T20:37:11 Creating triggers...
2018-04-06T20:37:11 Created triggers OK.
2018-04-06T20:37:11 Copying approximately 128448 rows...
^C# Exiting on SIGINT.
Not dropping triggers because the tool was interrupted.  To drop the triggers, execute:
DROP TRIGGER IF EXISTS `zst`.`pt_osc_zst_sbtest1_del`;
DROP TRIGGER IF EXISTS `zst`.`pt_osc_zst_sbtest1_upd`;
DROP TRIGGER IF EXISTS `zst`.`pt_osc_zst_sbtest1_ins`;
Not dropping the new table `zst`.`_sbtest1_new` because the tool was interrupted.  To drop the new table, execute:
DROP TABLE IF EXISTS `zst`.`_sbtest1_new`;
`zst`.`sbtest1` was not altered.


过程分析：
1. 用原来的表结构创建一个新表：
2018-04-06T13:35:52.224119Z	  147 Query	CREATE TABLE `zst`.`_sbtest1_new` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `k` int(10) unsigned NOT NULL DEFAULT '0',
  `c` char(120) NOT NULL DEFAULT '',
  `pad` char(60) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `k_1` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=9999786 DEFAULT CHARSET=utf8 MAX_ROWS=1000000

2. 在新表做对应的DDL操作
2018-04-06T13:35:52.302167Z	  147 Query	ALTER TABLE `zst`.`_sbtest1_new` add index(pad)

3. 创建触发器，用于记录从拷贝数据开始之后，对源数据表继续进行数据修改的操作记录下来，用于数据拷贝结束后，执行这些操作，保证数据不会丢失。

2018-04-06T13:35:52.446620Z	  147 Query	CREATE TRIGGER `pt_osc_zst_sbtest1_del` AFTER DELETE ON `zst`.`sbtest1` FOR EACH ROW DELETE IGNORE FROM `zst`.`_sbtest1_new` WHERE `zst`.`_sbtest1_new`.`id` <=> OLD.`id`
2018-04-06T13:35:52.463601Z	  147 Query	CREATE TRIGGER `pt_osc_zst_sbtest1_upd` AFTER UPDATE ON `zst`.`sbtest1` FOR EACH ROW REPLACE INTO `zst`.`_sbtest1_new` (`id`, `k`, `c`, `pad`) VALUES (NEW.`id`, NEW.`k`, NEW.`c`, NEW.`pad`)
2018-04-06T13:35:52.484607Z	  147 Query	CREATE TRIGGER `pt_osc_zst_sbtest1_ins` AFTER INSERT ON `zst`.`sbtest1` FOR EACH ROW REPLACE INTO `zst`.`_sbtest1_new` (`id`, `k`, `c`, `pad`) VALUES (NEW.`id`, NEW.`k`, NEW.`c`, NEW.`pad`)

4. 拷贝数据，从源数据表中拷贝数据到新表中, 同时添加 LOCK IN SHARE MODE (共享锁)
2018-04-06T13:35:52.519600Z	  147 Query	INSERT LOW_PRIORITY IGNORE INTO `zst`.`_sbtest1_new` (`id`, `k`, `c`, `pad`) SELECT `id`, `k`, `c`, `pad` FROM `zst`.`sbtest1` FORCE INDEX(`PRIMARY`) WHERE ((`id` >= '2')) AND ((`id` <= '1001')) LOCK IN SHARE MODE /*pt-online-schema-change 25069 copy nibble*/



5. rename源数据表为old表，把新表rename为源表名，并将old表删除。
RENAME TABLE `zst`.`sbtest1` TO `zst`.`_sbtest1_old`, `zst`.`_sbtest1_new` TO `zst`.`sbtest1`

6. 删除触发器



drop trigger pt_osc_zst_sbtest1_ins;
drop trigger pt_osc_zst_sbtest1_upd;
drop trigger pt_osc_zst_sbtest1_del;

CREATE TABLE `sbtest1` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `k` int(10) unsigned NOT NULL DEFAULT '0',
  `c` char(120) NOT NULL DEFAULT '',
  `pad` char(60) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `k_1` (`k`)
) ENGINE=InnoDB AUTO_INCREMENT=9999786 DEFAULT CHARSET=utf8 MAX_ROWS=1000000;

CREATE TRIGGER `pt_osc_zst_sbtest1_ins` AFTER INSERT ON `sbtest1` FOR EACH ROW REPLACE INTO `zst`.`_sbtest1_new` (`id`, `k`, `c`, `pad`) VALUES (NEW.`id`, NEW.`k`, NEW.`c`, NEW.`pad`);

CREATE TRIGGER `pt_osc_zst_sbtest1_upd` AFTER UPDATE ON `sbtest1` FOR EACH ROW REPLACE INTO `zst`.`_sbtest1_new` (`id`, `k`, `c`, `pad`) VALUES (NEW.`id`, NEW.`k`, NEW.`c`, NEW.`pad`);

CREATE TRIGGER `pt_osc_zst_sbtest1_del` AFTER DELETE ON `sbtest1` FOR EACH ROW DELETE IGNORE FROM `zst`.`_sbtest1_new` WHERE `zst`.`_sbtest1_new`.`id` <=> OLD.`id`;