
设置得太大:
	让更多的连接可以进来, 系统的负载可能会进一步加大, 大量的资源耗费在权限验证等逻辑上,结果可能适得其反.
	
	所以, 连接数设置的太多是没有意义的，而且大概率会拖慢系统的整体性能(系统的负载进一步升高).
	

作用/目的:
	保护 MySQL


ERROR 1040 (HY000): Too many connections

测试： set @@global.max_connections=1;

故障扫描: MySQL 雪崩, 业务连接超时

场景:
	1. CPU爆了
	2. 大量会话连接没有释放
	3. 功能的请求超时了，一直在转，然后紧接着其它功能也超时了.
	

分析：
	当数据库中出现访问表的SQL没创建索引导致全表扫描，
	如果表的数据量很大，扫描大量的数据，执行效率过慢，占用数据库连接，
	连接数堆积很快达到数据库的最大连接数设置，新的应用请求将会被拒绝，导致故障发生。

解决问题:
	问题根源找到了，会话锁死了，由其中的一张表没有索引而导致的，
	并询问需要给哪几个字段加索引，接着操作增加索引：
	发现创建索引的SQL一直卡死着, 因为创建索引产生了 MDL锁

解决办法:

	1. 
		kill 掉会话
		怎么办呢？会话杀不完
	2. 
		没办法，先把访问入口切断吧，反正现在用户访问也超时，就果断先把域名停了，
		访问入口给切断了，然后再增加索引。
		入口断了，索引也加上了，但发现CPU还下不去

	3. 
		实例重启
		实例重启完后，CPU下去了，会话也下去了


总结:
	对于故障排查,一定要了解当前正在进行的业务
	比如通过  show processlist 查看当前正在进行的会话


相关参考:
	https://www.cnblogs.com/gomysql/p/3834797.html     Too many connections解决方法
	https://mp.weixin.qq.com/s/vPkxkbMDrVMzOssJ6Jo1fg  MySQL上云后引发的雪崩
	https://dbaplus.cn/news-11-1690-1.html          MySQL中经典的too many connection怎么破


